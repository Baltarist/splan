// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String?
  lastName          String?
  avatar            String?
  isEmailVerified   Boolean  @default(false)
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userConfiguration UserConfiguration?
  goals             Goal[]
  sprints           Sprint[]
  tasks             Task[]
  conversations     Conversation[]
  leaveRequests     LeaveRequest[]
  timeEntries       TimeEntry[]
  notifications     Notification[]
  notificationPreference NotificationPreference?
  dataExports       DataExport[]
  dataImports       DataImport[]
  dataBackups       DataBackup[]
  dataRestores      DataRestore[]
  offlineSyncs      OfflineSync[]
  offlineData       OfflineData[]

  @@map("users")
}

model UserConfiguration {
  id                    String   @id @default(cuid())
  userId                String   @unique
  timezone              String   @default("UTC")
  workingDays           String   @default("monday,tuesday,wednesday,thursday,friday") // comma separated
  workingHoursStart     String   @default("09:00")
  workingHoursEnd       String   @default("17:00")
  coreHoursStart        String?
  coreHoursEnd          String?
  sprintDuration        Int      @default(14) // days
  sprintStartDay        String   @default("monday")
  dailyStandupTime      String   @default("09:00")
  demoTime              String   @default("16:00")
  retroTime             String   @default("17:00")
  aiPreferences         String?  // AI interaction preferences (JSON string)
  leaveSettings         String?  // Leave management settings (JSON string)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_configurations")
}

model Goal {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String?
  category          String?
  priority          String   @default("MEDIUM")
  status            String   @default("ACTIVE")
  targetDate        DateTime?
  estimatedEffort   String?
  actualEffort      String?
  progress          Float    @default(0)
  scopeDocument     String?  // AI generated scope document (JSON string)
  aiConfidenceScore Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sprints Sprint[]
  tasks   Task[]

  @@map("goals")
}

model Sprint {
  id                String   @id @default(cuid())
  userId            String
  goalId            String?
  title             String
  description       String?
  startDate         DateTime
  endDate           DateTime
  status            String   @default("PLANNED")
  capacity          Float?
  velocity          Float?
  burndownData      String?  // Burndown chart data (JSON string)
  healthMetrics     String?  // Sprint health metrics (JSON string)
  aiGeneratedPlan   String?  // AI generated sprint plan (JSON string)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal    Goal?    @relation(fields: [goalId], references: [id])
  tasks   Task[]

  @@map("sprints")
}

model Task {
  id                String   @id @default(cuid())
  userId            String
  sprintId          String?
  goalId            String?
  title             String
  description       String?
  status            String   @default("TODO")
  priority          String   @default("MEDIUM")
  estimatedHours    Float?
  actualHours       Float?
  progress          Float    @default(0)
  dueDate           DateTime?
  dependencies      String   // Task IDs that this task depends on (comma separated)
  tags              String   // Tags (comma separated)
  notes             String?
  aiGenerated       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sprint     Sprint?     @relation(fields: [sprintId], references: [id])
  goal       Goal?       @relation(fields: [goalId], references: [id])
  timeEntries TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String   @id @default(cuid())
  userId      String
  taskId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Float?   // in minutes
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  type      String
  context   String?  // Conversation context (JSON string)
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String
  content        String
  metadata       String?  // Additional message metadata (JSON string)
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model LeaveRequest {
  id                String      @id @default(cuid())
  userId            String
  type              String
  startDate         DateTime
  endDate           DateTime
  reason            String?
  status            String   @default("PENDING")
  approvedBy        String?     // AI agent or user ID
  approvedAt        DateTime?
  impactAnalysis    String?     // AI generated impact analysis (JSON string)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  type              String   // PUSH, EMAIL, IN_APP
  title             String
  message           String
  category          String   // TASK, SPRINT, GOAL, LEAVE, SYSTEM
  priority          String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status            String   @default("PENDING") // PENDING, SENT, FAILED, READ
  scheduledAt       DateTime?
  sentAt            DateTime?
  readAt            DateTime?
  metadata          String?  // Additional notification data (JSON string)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationTemplate {
  id                String   @id @default(cuid())
  name              String   @unique
  type              String   // PUSH, EMAIL, IN_APP
  category          String   // TASK, SPRINT, GOAL, LEAVE, SYSTEM
  titleTemplate     String
  messageTemplate   String
  isActive          Boolean  @default(true)
  variables         String?  // Available variables (JSON string)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("notification_templates")
}

model NotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  pushEnabled       Boolean  @default(true)
  emailEnabled      Boolean  @default(true)
  inAppEnabled      Boolean  @default(true)
  quietHoursStart   String?  // HH:MM format
  quietHoursEnd     String?  // HH:MM format
  categories        String?  // Enabled categories (JSON string)
  frequency         String   @default("IMMEDIATE") // IMMEDIATE, HOURLY, DAILY, WEEKLY
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model DataExport {
  id                String   @id @default(cuid())
  userId            String
  format            String   // JSON, CSV
  filename          String
  fileSize          Int
  status            String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  exportedAt        DateTime @default(now())
  errors            String?  // Error details (JSON string)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_exports")
}

model DataImport {
  id                String   @id @default(cuid())
  userId            String
  filename          String
  fileSize          Int
  status            String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  conflictResolution String  @default("SKIP") // SKIP, UPDATE, REPLACE
  importedRecords   Int?
  skippedRecords    Int?
  errorCount        Int?
  errors            String?  // Error details (JSON string)
  importedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_imports")
}

model DataBackup {
  id                String   @id @default(cuid())
  userId            String
  description       String
  filename          String?
  fileSize          Int?
  status            String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  errors            String?  // Error details (JSON string)
  createdAt         DateTime @default(now())
  completedAt       DateTime?
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_backups")
}

model DataRestore {
  id                String   @id @default(cuid())
  userId            String
  backupId          String
  status            String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  conflictResolution String  @default("SKIP") // SKIP, UPDATE, REPLACE
  restoredRecords   Int?
  skippedRecords    Int?
  errorCount        Int?
  errors            String?  // Error details (JSON string)
  restoredAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_restores")
}

model OfflineSync {
  id                String   @id @default(cuid())
  userId            String
  entityType        String   // GOAL, SPRINT, TASK, TIME_ENTRY, etc.
  entityId          String
  operation         String   // CREATE, UPDATE, DELETE
  data              String   // Entity data (JSON string)
  status            String   @default("PENDING") // PENDING, SYNCED, FAILED
  retryCount        Int      @default(0)
  lastRetryAt       DateTime?
  errorMessage      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("offline_syncs")
}

model OfflineData {
  id                String   @id @default(cuid())
  userId            String
  entityType        String   // GOAL, SPRINT, TASK, TIME_ENTRY, etc.
  entityId          String
  data              String   // Entity data (JSON string)
  version           Int      @default(1)
  lastSyncedAt      DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])

  @@map("offline_data")
}

// Enums removed for SQLite compatibility
// Use string values instead: "LOW", "MEDIUM", "HIGH", "CRITICAL", etc. 